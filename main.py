import logging
import os
import json
import asyncio
import aiohttp
import subprocess
from pathlib import Path
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
API_TOKEN = os.getenv("8172795119:AAEpaBjmHHDwQ-7YdbB4StGs_3OKmlM6tO4")
CUSTOM_MODEL_PATH = os.getenv("CUSTOM_MODEL_PATH", "model/")  # –ü—É—Ç—å –∫ –º–æ–¥–µ–ª—è–º –∏ —Å–∫—Ä–∏–ø—Ç–∞–º –Ω–µ–π—Ä–æ—Å–µ—Ç–∏

# –ü–∞–ø–∫–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGES_DIR = Path("generated_images")
IMAGES_DIR.mkdir(exist_ok=True)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())


# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WebApp
def get_webapp_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    webapp_button = InlineKeyboardButton(
        text="üé® –°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
        web_app=types.WebAppInfo(url=os.getenv("WEBAPP_URL"))
    )
    keyboard.add(webapp_button)
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å WebApp –∏ —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.",
        reply_markup=get_webapp_keyboard()
    )


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
async def generate_image(prompt, user_id, settings=None):
    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
        if settings is None:
            settings = {
                "imageSize": "512x512",
                "style": "default",
                "guidance": "7"
            }

        # –†–∞–∑–±–∏—Ä–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            width, height = settings["imageSize"].split("x")
        except (ValueError, KeyError):
            width, height = 512, 512

        # –°–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        user_dir = IMAGES_DIR / str(user_id)
        user_dir.mkdir(exist_ok=True)

        # –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        image_path = user_dir / "image.jpeg"

        # –õ–æ–≥–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        logging.info(f"Generating image for user {user_id} with prompt: {prompt}")
        logging.info(
            f"Settings: Size={width}x{height}, Style={settings.get('style', 'default')}, Guidance={settings.get('guidance', '7')}")

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        cmd = [
            "python",
            f"{CUSTOM_MODEL_PATH}/generate.py",
            "--prompt", prompt,
            "--output", str(image_path),
            "--width", str(width),
            "--height", str(height),
            "--style", settings.get("style", "default"),
            "--guidance", str(settings.get("guidance", "7"))
        ]

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∏ –∂–¥–µ–º –µ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        process = await asyncio.create_subprocess_exec(
            *cmd,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE
        )

        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            error_msg = stderr.decode()
            logging.error(f"Error generating image: {error_msg}")
            return None, error_msg

        logging.info(f"Image generated successfully: {stdout.decode()}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        if not image_path.exists():
            error_msg = "Image file was not created"
            logging.error(f"{error_msg} at {image_path}")
            return None, error_msg

        return image_path, None
    except Exception as e:
        error_msg = str(e)
        logging.error(f"Error generating image: {error_msg}")
        return None, error_msg


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏–∑ WebApp
@dp.message_handler(content_types=types.ContentTypes.WEB_APP_DATA)
async def web_app_data_handler(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ WebApp
    try:
        data = json.loads(message.web_app_data.data)
        prompt = data.get("prompt")
        settings = data.get("settings")
        image_generated = data.get("image_generated", False)  # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –±—ã–ª–æ –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ

        user_id = message.from_user.id

        if not prompt:
            await message.answer("‚ö†Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        settings_info = ""
        if settings:
            size = settings.get("imageSize", "512x512")
            style = settings.get("style", "default")
            guidance = settings.get("guidance", "7")

            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            style_names = {
                "default": "–û–±—ã—á–Ω—ã–π",
                "anime": "–ê–Ω–∏–º–µ",
                "realistic": "–§–æ—Ç–æ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π",
                "painting": "–ñ–∏–≤–æ–ø–∏—Å—å",
                "3d": "3D –†–µ–Ω–¥–µ—Ä",
                "sketch": "–°–∫–µ—Ç—á"
            }

            style_name = style_names.get(style, style.capitalize())

            settings_info = f"\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏: {size}, –°—Ç–∏–ª—å: {style_name}, –ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å: {guidance}"

        if not image_generated:
            # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞–Ω–µ–µ
            await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É...\n"
                                 f"–ó–∞–ø—Ä–æ—Å: {prompt}{settings_info}")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
            image_path, error = await generate_image(prompt, user_id, settings)

            if not image_path or not os.path.exists(image_path):
                error_message = "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. "
                if error:
                    error_message += f"–û—à–∏–±–∫–∞: {error}"
                else:
                    error_message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                await message.answer(error_message)
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(image_path, 'rb') as photo:
                await bot.send_photo(
                    message.chat.id,
                    photo=photo,
                    caption=f"üé® –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n{prompt}{settings_info}",
                    reply_markup=get_webapp_keyboard()
                )
        else:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª "–°–∫–∞—á–∞—Ç—å" –≤ WebApp, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–∂–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ
            user_dir = IMAGES_DIR / str(user_id)
            image_path = user_dir / "image.jpeg"

            if not os.path.exists(image_path):
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–µ–¥–ª–æ–∂–∏–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ
                await message.answer("üòî –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

                # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –ª–æ–∫–∞–ª—å–Ω–æ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
                image_path, error = await generate_image(prompt, user_id, settings)

                if not image_path or not os.path.exists(image_path):
                    error_message = "üòî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. "
                    if error:
                        error_message += f"–û—à–∏–±–∫–∞: {error}"
                    else:
                        error_message += "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
                    await message.answer(error_message)
                    return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(image_path, 'rb') as photo:
                await bot.send_photo(
                    message.chat.id,
                    photo=photo,
                    caption=f"üé® –í–∞—à–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n{prompt}{settings_info}",
                    reply_markup=get_webapp_keyboard()
                )
    except Exception as e:
        logging.error(f"Error processing WebApp data: {e}")
        await message.answer("üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)